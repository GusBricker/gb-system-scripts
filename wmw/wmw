#!/bin/bash

ARG_OPERATION=""
ARG_PATH=""
ARG_FREQUENCY="600"
ARG_EXCLUDES=()
ARG_NUM_VERSIONS=20
ARG_DESTINATION="${HOME}/.wmw"
CFG_TAR_ARCHIVE_TYPE="z"
CFG_TAR_FILE_EXTENSION="tar.gz"
THIS_SCRIPT=$(basename "${0}")
GBL_WORKING_DIRECTORY=""
GBL_NAME=""
GBL_BACKUP_DATE=""
GBL_THIS_BACKUP_FOLDER=""


platform="$(uname)"
platform_is_osx="no"
platform_is_linux="no"

function usage()
{
	cat <<-__EOF__
Usage: ${THIS_SCRIPT} [OPTIONS]...
Watch me work!

Watches you work, periodically backing up your work to either ${ARG_DESTINATION} or
to a directory you specify with the -d argument.

Options:
    -o,--operation          Valid values:
                            start: Startings monitoring at specified interval
                            stop: Stops monitoring an instance specified by path
                            now: Does a single backup right now!
    -p,--path               Path to backup, can be either a file or folder.
    -e,--exclude            Tar exclude filter to ignore certain files, defaults to no filter.
                            Can be specified multiple times.
    -f,--frequency          Frequency to backup the given path. Given directly to sleep command.
                            For Linux, can use postfixes, such as s,m,h respectively for seconds,minutes,hours.
                            For OSX, can only use seconds!
                            Defaults to 10 minutes interval.
    -d,--destination        Place to backup files to!
    -n,--num_versions       Number of versions of keep of backup. Will delete oldest backups first.
                            Defaults to 20.
    -h,--help               Print this awesome info!

Note: All arguments that take parameters are equals seperated.
For example use -p like this: -p=~/my_stuff

Chris Lapa <chris@lapa.com.au>
__EOF__
}

function abspath_purebash()
{ 
    # Taken from: http://superuser.com/a/218684
    pushd . > /dev/null

    if [ -d "$1" ]
    then
        cd "$1"
        dirs -l +0
    else
        cd "$(dirname \"$1\")"
        cur_dir=$(dirs -l +0)
        if [[ "$cur_dir" == "/" ]]
        then
            echo "$cur_dir$(basename \"$1\")"
        else
            echo "$cur_dir/$(basename \"$1\")"
        fi
    fi
    popd > /dev/null
}

function echo_or_log()
{
    if [[ "x${ARG_OPERATION}" != "xstart" ]]
    then
        echo "$@"
    else
        if [[ "x${GBL_THIS_BACKUP_FOLDER}" != "x" ]]
        then
            local now_fine="$(date +'%Y-%m-%d_%H-%M-%S')"
            local log_file="${GBL_THIS_BACKUP_FOLDER}/${GBL_NAME}.log"

            echo "--${now_fine}--" >> "${log_file}"
            echo "${@}" >> "${log_file}"
        else
            echo "--${now_fine}--"
            echo "!! Calling echo_or_log to early !!"
            echo "${@}"
        fi

        if [[ "x${DEBUG_WMW}" == "xyes" ]]
        then
            echo "--${now_fine}--"
            echo "!! Debug enabled !!"
            echo "${@}"
        fi
    fi
}

function take_snapshot()
{
    echo "Ok, going to work for you!"
    while true
    do
        GBL_BACKUP_DATE="$(date +'%Y-%m-%d_%H-%M')"
        GBL_WORKING_DIRECTORY=""
        GBL_NAME=""
        local tar_backup_cmd=""
        if [[ -f "${ARG_PATH}" ]]
        then
            GBL_WORKING_DIRECTORY="$( cd $( dirname ${ARG_PATH} ) && pwd )"
            GBL_NAME="$( basename ${ARG_PATH} )"
            tar_backup_cmd="-C ${GBL_WORKING_DIRECTORY} ${GBL_NAME}"
        elif [[ -d "${ARG_PATH}" ]]
        then
            GBL_WORKING_DIRECTORY="$( cd ${ARG_PATH} && pwd )"
            GBL_NAME="$( basename ${GBL_WORKING_DIRECTORY} )"
            tar_backup_cmd="-C ${GBL_WORKING_DIRECTORY} ."
        else
            echo "Path argument must be a directory or file"
            exit 1
        fi

        local gen_backups_folder="${ARG_DESTINATION}/backups/${GBL_WORKING_DIRECTORY}"
        GBL_THIS_BACKUP_FOLDER="${gen_backups_folder}/${GBL_BACKUP_DATE}"
        local gen_backup_file="${GBL_NAME}.${CFG_TAR_FILE_EXTENSION}"
        mkdir -p "${GBL_THIS_BACKUP_FOLDER}"

        # Cleanup older snapshots
        pushd "${gen_backups_folder}" >/dev/null
        local to_delete=$(ls -t | awk "NR>${ARG_NUM_VERSIONS}")
        if [[ "x${to_delete}" != "x" ]]
        then
            echo_or_log "Deleting: ${to_delete}"
            rm -r ${to_delete}
        fi
        popd >/dev/null

        # Build up excludes
        local built_up_excludes=""
        for ((i = 0; i < ${#ARG_EXCLUDES[@]}; i++))
        do
            built_up_excludes="--exclude=${ARG_EXCLUDES[$i]} ${built_up_excludes}"
        done

        # Create new snapshot
        echo_or_log "Backing up ${GBL_NAME} to ${GBL_THIS_BACKUP_FOLDER}"

        local tar_output=$( tar -c${CFG_TAR_ARCHIVE_TYPE}f "${GBL_THIS_BACKUP_FOLDER}/${gen_backup_file}" ${built_up_excludes} ${tar_backup_cmd} )
        echo_or_log "${tar_output}"

        if [[ "x${ARG_OPERATION}" == "xstart" ]]
        then
            echo_or_log "Done, sleeping for ${ARG_FREQUENCY}"
            sleep "${ARG_FREQUENCY}"
        elif [[ "x${ARG_OPERATION}" == "xnow" ]]
        then
            echo_or_log "Done"
            return
        fi
    done
}

if [[ "x${platform}" == "xLinux" ]]
then
    platform_is_linux="yes"
    abspath="readlink -f"
elif [[ "x${platform}" == "xDarwin" ]]
then
    platform_is_osx="yes"
    abspath="abspath_purebash"
else
    echo "Couldnt determine platform!"
fi

if [[ "x${@}" == "x" ]]
then
    usage
    exit 0
fi

for i in "$@"
do
    case ${i} in
        -o=*|--operation=*)
            ARG_OPERATION="${i#*=}"
            shift
            ;;
        -p=*|--path=*)
            ARG_PATH="${i#*=}"
            shift
            ;;
        -f=*|--frequency=*)
            ARG_FREQUENCY="${i#*=}"
            shift
            ;;
        -e=*|--exclude=*)
            ARG_EXCLUDES+=("${i#*=}")
            shift
            ;;
        -d=*|--destination=*)
            ARG_DESTINATION="${i#*=}"
            shift
            ;;
        -n=*|--num_versions=*)
            ARG_NUM_VERSIONS="${i#*=}"
            shift
            ;;
        *)
            usage
            exit 0
            ;;
        -h|--help)
            usage
            exit 0
            ;;
    esac
done

if [[ "x${ARG_PATH}" == "x" ]]
then
    echo "Path missing, can't backup nothing!"
    exit 1
fi

mkdir -p ${ARG_DESTINATION}

case "x${ARG_OPERATION}" in
    "xstart"|"xnow")
        take_snapshot &
        ;;
    "xstop")
        pid_to_kill=$(pgrep -f "${THIS_SCRIPT} .*${ARG_PATH}.* ")
        if [[ "x${pid_to_kill}" != "x" ]]
        then
            echo "Found ${THIS_SCRIPT} under PID: ${pid_to_kill}"
            kill "${pid_to_kill}"
        fi
        ;;
    *)
        echo "Invalid operation, check usage with --help"
        exit 1
esac


